
# Need to preserve ex and fx intact 
# for RAND_CELLS and DISP_CELLS

:START  # init values    

    copy  80, ex        # Width
    copy  20, fx        # Height
    
    mul   ex, fx        # Number of cells
    copy  fx, sp        # Reserve memory

    call MAIN_LOOP

    disp  10, char
    exit


:MAIN_LOOP
    copy 0, cx     # number if iterations

    cls

    call RAND_CELLS # subject to change
    call SET_CELLS_NEXT_STATE
    cls
    call DISP_CELLS
    call DISP_GENERATION_COUNT

:INNER_LOOP_MAIN
    add 1, cx
    cmp 6, cx
    ret if EQU

    call APPLY_CELLS_NEXT_STATE
    call SET_CELLS_NEXT_STATE

    cls
        
    call DISP_CELLS
    
    call DISP_GENERATION_COUNT

    
    # disp 10, char
    wait 230, ms

    jump INNER_LOOP_MAIN


#-------------------------------------------------
# Randomize the current state of the current cell
#-------------------------------------------------

:RAND_ONE_CELL
    copy (si), dx
    rand    ax
    mod     1000, ax                    # Visualize % of alive cells |> 15/100 cells will be alive 
    cmp     380, ax                     # Alive threshold            |
    call    SET_CELL_ALIVE if NEG
    ret

#-------------------------------
# Set Cell either dead or alive
#-------------------------------

:SET_CELL_DEAD
    copy    0, (si)
    ret

:SET_CELL_ALIVE
    copy    1, (si)
    ret

#-----------------------------------------------------------------
# Set the next state of every cells according to their neighbours
#-----------------------------------------------------------------

:SET_CELLS_NEXT_STATE
   copy -1, si  
:INNER_LOOP_PROCESS                 # Loop through every cells
    add  1, si
    cmp  fx, si                     # Number of cells
    ret  if  EQU

    call SET_NEXT_STATE             # Process cell's next state

    jump INNER_LOOP_PROCESS

#------------------------------------------------------------
# Copy to (si) the current state and the next state in bit n2
#------------------------------------------------------------

:SET_NEXT_STATE
    call COUNT_NEIGHBOURS       # Count number of Alive neighbours put result in ax
    copy (si), dx 
    and  0x0001, dx
:CELL_IS_DEAD
    cmp     4, ax
    jump SNS_END if NEG
    add     2, dx               # Set next state to alive
    jump SNS_END
:CELL_IS_ALIVE
    cmp     4, ax
    jump SNS_END if NEG
    add     2, dx               # Set next state to alive

:SNS_END
    #disp    (si), int
    copy    dx, (si)            # copy next state value 
    #disp    (si), int
    #disp    32, char
    ret



#-------------------------------------------
# Copy to ax the number of alive neighbours
#-------------------------------------------


:COUNT_NEIGHBOURS               # count the numbers of neighbours of si cell
    copy 0, ax                  # used to count neighbours

# -- Check borders -- #
# set borders cell to 0 neighbours automatically -> set them to dead

    cmp ex, si
    jump ZERO if NEG        # If on the first line, set to dead 
    copy fx, dx
    sub  ex, dx
    cmp dx, si
    jump ZERO if POS        # If on the last line, set to dead
    copy si, dx
    mod  ex, dx             
    cmp   0, dx
    jump ZERO if ZRO        # If on the first column, set to dead
    cmp  ex, dx
    jump ZERO if EQU        # If on the first column, set to dead
    
     
# -- Normal cases -- #
# set ax to the cell's neighbours count 

    copy si, dx
    sub  ex, dx             # Top side neighbours
    copy -1(dx), bx
    call COUNT_ONE_NEIGH
    copy 0(dx), bx
    call COUNT_ONE_NEIGH
    copy 1(dx), bx
    call COUNT_ONE_NEIGH

    copy si, dx             # Same row neighbours
    copy -1(dx), bx
    call COUNT_ONE_NEIGH
    copy 1(dx), bx
    call COUNT_ONE_NEIGH

    copy si, dx
    add  ex, dx             # Bottom side neighbours
    copy -1(dx), bx
    call COUNT_ONE_NEIGH
    copy 0(dx), bx
    call COUNT_ONE_NEIGH
    copy 1(dx), bx
    call COUNT_ONE_NEIGH

    # ax now contain's the cell's number of alive neighbours

:ZERO                       # Used to automatically set limit cells neighbours count to 0 
    # disp ax, int
    # disp 32, char
    ret
    
#-------------------------------------------
# Increment ax if bx is ODD, reset bx after
#-------------------------------------------

:COUNT_ONE_NEIGH
    cmp 0, bx
    jump INCR if ODD        # the cell is alive, add 1 to ax
    jump INCR_END 
:INCR
    add 1, ax
:INCR_END
    copy 0, bx
    ret
    

#-------------------------------------
# Apply the next state of every cells
#-------------------------------------

:APPLY_CELLS_NEXT_STATE
    copy -1, si  
:INNER_LOOP_APPLY                   # Loop through every cells
    add  1, si
    cmp  fx, si                     # Number of cells
    ret  if  EQU

    call APPLY_ONE_NEXT_STATE             # Apply cell's next state

    jump INNER_LOOP_APPLY


#-----------------------------------------
# Apply the next cell to the current cell
#-----------------------------------------

:APPLY_ONE_NEXT_STATE
    copy (si), dx
    # disp (si), int
    and  0x0003, dx

    # cmp 0, dx
    # call SET_CELL_DEAD if EQU       # next state == current state
    # cmp 3, dx
    # call SET_CELL_ALIVE if EQU      # next state == current state

    cmp 1, dx
    call SET_CELL_DEAD if EQU
    cmp 2, dx
    call SET_CELL_ALIVE if EQU



:ACNS_END
    # disp (si), int
    # disp 32, char
    ret
    

#--------------------------------------------
# Randomize the current state of every cells
#--------------------------------------------

:RAND_CELLS
    copy -1, si
:INNER_LOOP_RAND
    add   1, si
    cmp  fx, si                        # Number of cells
    ret  if  EQU
    
    call RAND_ONE_CELL 
    call NULL_IF_BORDERS

    jump INNER_LOOP_RAND



#-------------------------------
# Set Cell dead if on a border 
#-------------------------------

:NULL_IF_BORDERS

    cmp ex, si
    jump NULL if NEG        # If on the first line, set to dead 
    copy fx, dx
    sub  ex, dx
    cmp dx, si
    jump NULL if POS        # If on the last line, set to dead
    copy si, dx
    mod  ex, dx             
    cmp   0, dx
    jump NULL if ZRO        # If on the first column, set to dead
    cmp  ex, dx
    jump NULL if EQU        # If on the first column, set to dead

    ret                     # If not on a border do nothing
:NULL
    copy 0, (si)
    ret

#------------------------------------------------------
# Display every cells depending on their current state
#------------------------------------------------------

:DISP_CELLS
    copy -1, si
:INNER_LOOP_DISP
    add   1, si
    cmp  fx, si                 # Number of cells
    ret  if  EQU
    
    copy    si, ax              # Display cells as a grid
    mod     ex, ax              # Line length
    call ENDL if EQU 

    call DISP_ONE_CELL          # Display current cell        

    jump INNER_LOOP_DISP        # Goto next cell

:ENDL
    disp 10, char
    ret


#---------------------------------------------------------
# Display the current cell depending on its current state
#---------------------------------------------------------

:DISP_ONE_CELL
    cmp     0, (si)
    jump    DEAD if EQU        
    cmp     1, (si)
    jump    DEAD_SOON if EQU    
    cmp     2, (si)
    jump    ALIVE_SOON if EQU    
    cmp     3, (si)
    jump    ALIVE if EQU    
:DEAD
    disp    '\s', char          # Display empty space if dead
    ret
:ALIVE
    disp    '\#', char          # Char to display if alive
    ret
:ALIVE_SOON
    disp    '\s', char          # Char to display if alive
    # disp    '+', char
    ret
:DEAD_SOON
    disp    '\#', char          # Char to display if alive
    # disp    '-', char
    ret


#---------------------------------
# Display the number of iteration
#---------------------------------

:DISP_GENERATION_COUNT

    disp 10, char
    disp 'G', char
    disp 'e', char
    disp 'n', char
    disp 'e', char
    disp 'r', char
    disp 'a', char
    disp 't', char
    disp 'i', char
    disp 'o', char
    disp 'n', char
    disp '\s', char
    disp 'n', char
    disp '.', char
    disp  cx, mem
    disp  10, char
    
    ret
